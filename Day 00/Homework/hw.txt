1) შექმენით ორი ფაილი, პირველის სახელი იყოს calculator.js ხოლო მეორე index.js, პირველ ფაილში შექმენით ფუნქცია რომელიც იღებს ორ არგუმენტს და ერთ ოპერაციას, გამოიყენეთ შესაბამის ოპერატორი რომ დააბრუნოთ ფუნქციიდან შედეგი, დააექსპორტეთეს ფუნქცია და გადაიტენეთ index.js ფაილში გამოიყენეთ module.exports და require() ახსენით რისთვის გამოიყენება თითოეული

2) იგივე ფაილში შექმენით ფუნქცია სახელად filter რომელსაც გადაეცემა ერთი მასივი და მეორე ფუნცია არგუმენტად, გადაუარეთ for ციკლით მასივს და ყველა მნიშვნელობაზე გამოიძახეთ ფუნქცია რომელიც არგუმენტად მიიღეთ, მაგ ფუნქციას კი გადაეცით რიგრიგობით მნიშვნელობები, თუ დაბრუნებული მნიშვნელობა იქნება True შეინახეთ ახალ მასივში და დააბრუნეთ ეგ მასივი, filter and calculator ფუნქცია გადაიტანეთ index.js ფაილში და ორივე გამოიძახეთ

3) გამოიყენეთ თანამედროვე ES6 import export ბრძანებები, ამისათვის დაგჭირდებათ რომ შექმნათ სამართავლი ფაილი, ტერმინალში დაწერეთ npm init, package.json ში დაამატეთ ახალი კუთვნილება სახელად "type" და მიანიჭეთ ის ტიპი რომელიც მხარს უჭერს თანამედრეოვე გზის გამოყენებას

Task 1 & 2: Using CommonJS for Import and Export
This task involves using CommonJS syntax with module.exports and require to export and import functions in JavaScript.

Task 1: Create a file called mathUtils.js. In this file, define two functions: add(a, b) that returns the sum of a and b, and subtract(a, b) that returns the difference between a and b. Export both functions using module.exports. Then, create a main.js file and import the add and subtract functions using require. Use these functions to perform some calculations and log the results to the console.

Task 2: Create a file called message.js. In this file, create an object greeting with properties text: "Hello" and language: "English". Export this object as the default export using module.exports. Then, in a display.js file, import the default export using require and log the greeting text and language to the console.```
-------------------------------------------------------------------------------------------
Task 3 & 4 & 5: Using ES Modules for Import and Export
This task utilizes ES Module syntax with export and import to manage named and default exports in JavaScript.
Task 3: First, run npm init in your project directory to generate a package.json file. Make sure to add "type": "module" at the top level of your package.json so that Node.js recognizes ES module syntax. Create a file called greetings.js. In this file, export two named functions: sayHello that returns "Hello, World!" and sayGoodbye that returns "Goodbye, everyone!". Then, create a main.js file. In main.js, import both sayHello and sayGoodbye from greetings.js and log their return values to the console.
Task 4: First, run npm init in your project directory to generate a package.json file. Make sure to add "type": "module" at the top level of your package.json so that Node.js recognizes ES module syntax. Create a file called animals.js. In this file, define a default export object with properties species: "Tiger" and sound: "Growl". Create another file called zoo.js and import the default export from animals.js. Use console.log to display the animal's species and sound.
Task 5: First, run npm init in your project directory to generate a package.json file. Make sure to add "type": "module" at the top level of your package.json so that Node.js recognizes ES module syntax. Create a file called mathOperations.js. Export a default function add(a, b) that returns the sum of a and b. Also, create a named export subtract(a, b) that returns the difference between a and b. Then, create a calculator.js file and import both the default export and the named export from mathOperations.js. Use these functions to perform addition and subtraction, and log the results.

-------------------------------------------------------------------------------------------
6) Create a simple to-do list application by building an HTML page with an input field, an "Add Task" button, and an empty <ul> list to display tasks. In a separate tasks.js file, create an array to hold tasks as objects with properties text (string) and completed (boolean). Write functions to add tasks to the array, toggle task completion when clicked, and remove tasks. In app.js, import the functions from tasks.js using ES Modules and set up event listeners for the "Add Task" button and task interactions. Render the tasks dynamically in the DOM and update the list accordingly. Optionally, use local storage to save tasks between page reloads. This task will help you practice working with arrays, objects, DOM manipulation, and ES Modules, laying a strong foundation for React.